package com.ewingsa.ohyeah.helpers

import android.content.Context
import android.content.res.Resources
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Matrix
import android.graphics.Rect
import android.net.Uri
import androidx.exifinterface.media.ExifInterface
import java.io.FileNotFoundException
import java.io.InputStream

object DrawableHelper {

    private const val NINETY = 90F
    private const val ONE_EIGHTY = 180F
    private const val TWO_SEVENTY = 270F

    private val PIXELS_IN_SMALL_IMAGE: Float by lazy { 100F * (Resources.getSystem()?.displayMetrics?.density ?: 1F) }

    /**
     * @return A bitmap with its longest dimension no more than 100 dp
     */
    fun getSmallBitmap(uri: String?, context: Context?): Bitmap? {
        return context?.let {
            uri?.let { uri ->
                uriToSmallBitmap(uri, it)
            }
        }
    }

    private fun uriToSmallBitmap(uri: String, context: Context): Bitmap? {
        return try {
            val parsedUri = Uri.parse(uri)
            BitmapFactory.Options().run {
                inJustDecodeBounds = true
                val imageDimensionInputStream = context.contentResolver.openInputStream(parsedUri)
                BitmapFactory.decodeStream(imageDimensionInputStream, null, this)
                imageDimensionInputStream?.close()

                inSampleSize = smallImageInSampleSize(this)

                inJustDecodeBounds = false

                val inputStream = context.contentResolver.openInputStream(parsedUri)
                val bitmap = BitmapFactory.decodeStream(inputStream, Rect(), this)
                return fixOrientation(inputStream, bitmap).also {
                    inputStream?.close()
                }
            }
        } catch (exception: FileNotFoundException) {
            null
        } catch (exception: SecurityException) {
            null
        } catch (exception: OutOfMemoryError) {
            null
        } catch (exception: Exception) { // An exception generated by this image decoding function is not significant enough to be surfaced.
            null
        }
    }

    private fun smallImageInSampleSize(options: BitmapFactory.Options): Int {
        val height = options.outHeight
        val width = options.outWidth

        var inSampleSize = 1
        if (height > PIXELS_IN_SMALL_IMAGE || width > PIXELS_IN_SMALL_IMAGE) {
            val halfHeight: Int = height / 2
            val halfWidth: Int = width / 2

            while (halfHeight / inSampleSize >= PIXELS_IN_SMALL_IMAGE && halfWidth / inSampleSize >= PIXELS_IN_SMALL_IMAGE) {
                inSampleSize *= 2
            }
        }
        return inSampleSize
    }

    private fun fixOrientation(inputStream: InputStream?, bitmap: Bitmap?): Bitmap? {
        return bitmap?.let {
            val exifInterface = inputStream?.let { inputStream -> ExifInterface(inputStream) }

            return when (exifInterface?.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED) ?: 0) {
                ExifInterface.ORIENTATION_ROTATE_90 -> rotateImage(it, NINETY)
                ExifInterface.ORIENTATION_ROTATE_180 -> rotateImage(it, ONE_EIGHTY)
                ExifInterface.ORIENTATION_ROTATE_270 -> rotateImage(it, TWO_SEVENTY)
                else -> it
            }
        }
    }

    private fun rotateImage(source: Bitmap, angle: Float): Bitmap {
        val matrix = Matrix()
        matrix.postRotate(angle)
        return Bitmap.createBitmap(
            source,
            0,
            0,
            source.width,
            source.height,
            matrix,
            true
        )
    }
}
